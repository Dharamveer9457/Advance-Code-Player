{"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\91945\\\\Desktop\\\\Advance-Code-Player\\\\backend\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\91945\\\\Desktop\\\\Advance-Code-Player\\\\backend\",\"filename\":\"C:\\\\Users\\\\91945\\\\Desktop\\\\Advance-Code-Player\\\\backend\\\\index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\91945\\\\Desktop\\\\Advance-Code-Player\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"MemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.22.17:development":{"value":{"code":"\"use strict\";\n\nvar _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar express = require(\"express\");\nvar app = express();\nrequire('dotenv').config();\nvar port = process.env.PORT || 3000;\nvar axios = require(\"axios\");\nvar _require = require(\"@octokit/rest\"),\n  Octokit = _require.Octokit;\nvar cors = require(\"cors\");\nvar fetch = function fetch() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return Promise.resolve().then(function () {\n    return _interopRequireWildcard(require('node-fetch'));\n  }).then(function (_ref) {\n    var fetch = _ref[\"default\"];\n    return fetch.apply(void 0, args);\n  });\n};\nvar session = require('express-session');\napp.use(cors());\napp.use(express.json());\napp.use(session({\n  secret: 'code-convertor',\n  // Replace with a strong, random secret\n  resave: false,\n  saveUninitialized: true\n}));\n\n// Define an endpoint to generate quotes\napp.post('/convert', function (_x, _x2) {\n  return (_ref2 = _ref2 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {\n    var _req$body, code, language, apiKey, response, convertedCode;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _req$body = req.body, code = _req$body.code, language = _req$body.language;\n          apiKey = process.env.apikey;\n          _context.prev = 2;\n          _context.next = 5;\n          return axios.post('https://api.openai.com/v1/engines/text-davinci-002/completions', {\n            prompt: \"Act as a code convertor. I will provide you the code and you have to convert it to \".concat(language, \". No need to explain the code. Just provide the converted code. Also, if there are two or three code snippet convert all the code seperately.\\n \").concat(code),\n            max_tokens: 500 // Adjust as needed\n          }, {\n            headers: {\n              Authorization: \"Bearer \".concat(apiKey)\n            }\n          });\n        case 5:\n          response = _context.sent;\n          convertedCode = response.data.choices[0].text;\n          res.json({\n            convertedCode: convertedCode\n          });\n          _context.next = 14;\n          break;\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](2);\n          console.error('Error converting code:', _context.t0);\n          res.status(500).json({\n            error: 'An error occurred while converting code.'\n          });\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[2, 10]]);\n  }))).apply(this, arguments);\n});\napp.post('/debug', function (_x3, _x4) {\n  return (_ref3 = _ref3 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res) {\n    var code, apiKey, response, debuggedCode;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          code = req.body.code;\n          apiKey = process.env.apikey;\n          _context2.prev = 2;\n          _context2.next = 5;\n          return axios.post('https://api.openai.com/v1/engines/text-davinci-002/completions', {\n            prompt: \"Act as a code debugger. I will provide you the code snippet and you have to debug it. You have to provide me the response in output section and also explain the code.\\n \".concat(code),\n            max_tokens: 500 // Adjust as needed\n          }, {\n            headers: {\n              Authorization: \"Bearer \".concat(apiKey)\n            }\n          });\n        case 5:\n          response = _context2.sent;\n          debuggedCode = response.data.choices[0].text;\n          res.json({\n            debuggedCode: debuggedCode\n          });\n          _context2.next = 14;\n          break;\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](2);\n          console.error('Error converting code:', _context2.t0);\n          res.status(500).json({\n            error: 'An error occurred while converting code.'\n          });\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[2, 10]]);\n  }))).apply(this, arguments);\n});\napp.post('/quality', function (_x5, _x6) {\n  return (_ref4 = _ref4 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(req, res) {\n    var code, apiKey, response, checkedCode;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          code = req.body.code;\n          apiKey = process.env.apikey;\n          _context3.prev = 2;\n          _context3.next = 5;\n          return axios.post('https://api.openai.com/v1/engines/text-davinci-002/completions', {\n            prompt: \"Act as a code quality checker. I will provide you the code snippet and you have to check quality of the code. You have to provide me your suggestions to improve the code. And also tell me what is need to be fix to make the code looks better and understandable to everyone.\\n \".concat(code),\n            max_tokens: 1000 // Adjust as needed\n          }, {\n            headers: {\n              Authorization: \"Bearer \".concat(apiKey)\n            }\n          });\n        case 5:\n          response = _context3.sent;\n          checkedCode = response.data.choices[0].text;\n          res.json({\n            checkedCode: checkedCode\n          });\n          _context3.next = 14;\n          break;\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](2);\n          console.error('Error converting code:', _context3.t0);\n          res.status(500).json({\n            error: 'An error occurred while converting code.'\n          });\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[2, 10]]);\n  }))).apply(this, arguments);\n});\nvar callbackUrl = 'https://advance-code-player.vercel.app/home.html';\napp.get('/auth/github', function (req, res) {\n  var authUrl = \"https://github.com/login/oauth/authorize?client_id=\".concat(process.env.github_client_ID, \"&redirect_uri=\").concat(callbackUrl);\n  res.redirect(authUrl);\n});\n\n// GitHub callback handler\napp.get('/auth/github/callback', function (_x7, _x8) {\n  return (_ref5 = _ref5 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req, res) {\n    var params;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          // const code = req.query.code;\n          // const error = req.query.error; // Check for the 'error' query parameter\n          // if (error) {\n          //     // User denied access, handle the error as needed\n          //     return res.status(403).send('Access denied by the user.');\n          // }\n          // // Exchange the code for an access token\n          // try {\n          //     const tokenResponse = await axios.post('https://github.com/login/oauth/access_token', {\n          //         client_id: process.env.github_client_ID,\n          //         client_secret: process.env.github_client_secret,\n          //         code: code\n          //     }, {\n          //         headers: {\n          //             Accept: 'application/json'\n          //         }\n          //     });\n          //     const accessToken = tokenResponse.data.access_token;\n          //     console.log(accessToken);\n          //     // Use the access token to fetch the user's GitHub profile\n          //     const userResponse = await axios.get('https://api.github.com/user', {\n          //         headers: {\n          //             Authorization: `Bearer ${accessToken}`\n          //         }\n          //     });\n          //     const userProfile = userResponse.data;\n          //     // You can now use the user profile data as needed\n          //     console.log(userProfile);\n          //     req.session.accessToken = accessToken;\n          //     // Redirect the user to the desired page after successful authentication\n          //     res.redirect('http://localhost:3000/repositories');\n          //     // res.json({\"token\":accessToken, \"msg\":\"User logged in successfully.\"});\n          // } catch (error) {\n          //     console.error(error);\n          //     res.status(500).send('Error occurred during authentication.');\n          // }\n          params = \"?client_id=\" + process.env.github_client_ID + \"&client_secret=\" + process.env.github_client_secret + \"&code=\" + req.query.code + \"&scope=repo\";\n          _context4.next = 3;\n          return fetch(\"https://github.com/login/oauth/access_token\" + params, {\n            method: \"POST\",\n            headers: {\n              \"Accept\": \"application/json\"\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (data) {\n            res.json(data);\n          });\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }))).apply(this, arguments);\n});\n\n// Define an endpoint to push code to GitHub\n// app.post('/push-to-repo', async (req, res) => {\n//   try {\n//     // Extract data from the request body\n//     const { accessToken, repoName, fileName, commitMessage, code } = req.body;\n\n//     // Define the GitHub API endpoint for creating a new file\n//     const apiUrl = `https://api.github.com/repos/${repoName}/contents/${fileName}`;\n\n//     // Construct the request payload\n//     const requestData = {\n//       message: commitMessage,\n//       content: Buffer.from(code).toString('base64'), // Convert code to base64\n//     };\n\n//     // Set the authorization header with the GitHub access token\n//     const headers = {\n//       Authorization: `Bearer ${accessToken}`,\n//     };\n\n//     // Make a PUT request to create or update the file in the repository\n//     const response = await axios.put(apiUrl, requestData, { headers });\n\n//     if (response.status === 201) {\n//       res.status(201).json({ message: 'File created successfully!' });\n//     } else {\n//       res.status(response.status).json({ message: 'Failed to create file.' });\n//     }\n//   } catch (error) {\n//     console.error('Error pushing code to repository:', error.message);\n//     res.status(500).json({ message: 'Internal server error.' });\n//   }\n// });\n\napp.post('/push-to-repo', function (_x9, _x10) {\n  return (_ref6 = _ref6 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {\n    var _req$body2, accessToken, brandName, fileContent, fileName, owner, repo, commitMessage, octokit, _yield$octokit$repos$, branchData, latestCommitSha, _yield$octokit$git$ge, treeData, file;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _req$body2 = req.body, accessToken = _req$body2.accessToken, brandName = _req$body2.brandName, fileContent = _req$body2.fileContent, fileName = _req$body2.fileName, owner = _req$body2.owner, repo = _req$body2.repo, commitMessage = _req$body2.commitMessage;\n          octokit = new Octokit({\n            auth: accessToken\n          });\n          _context5.prev = 2;\n          _context5.next = 5;\n          return octokit.repos.getBranch({\n            owner: owner,\n            repo: repo,\n            branch: brandName // Replace with your default branch name\n          });\n        case 5:\n          _yield$octokit$repos$ = _context5.sent;\n          branchData = _yield$octokit$repos$.data;\n          // Get the latest commit on the branch\n          latestCommitSha = branchData.commit.sha; // Get the current tree of the latest commit\n          _context5.next = 10;\n          return octokit.git.getTree({\n            owner: owner,\n            repo: repo,\n            tree_sha: latestCommitSha,\n            recursive: true\n          });\n        case 10:\n          _yield$octokit$git$ge = _context5.sent;\n          treeData = _yield$octokit$git$ge.data;\n          // Find the file if it already exists in the tree\n          file = treeData.tree.find(function (item) {\n            return item.path === fileName;\n          });\n          if (!file) {\n            _context5.next = 18;\n            break;\n          }\n          _context5.next = 16;\n          return octokit.repos.createOrUpdateFileContents({\n            owner: owner,\n            repo: repo,\n            path: fileName,\n            message: \"\".concat(commitMessage),\n            content: Buffer.from(fileContent).toString(\"base64\"),\n            sha: file.sha,\n            branch: brandName // Replace with your default branch name\n          });\n        case 16:\n          _context5.next = 20;\n          break;\n        case 18:\n          _context5.next = 20;\n          return octokit.repos.createOrUpdateFileContents({\n            owner: owner,\n            repo: repo,\n            path: fileName,\n            message: \"\".concat(commitMessage),\n            content: Buffer.from(fileContent).toString(\"base64\"),\n            branch: brandName // Replace with your default branch name\n          });\n        case 20:\n          console.log(\"File \\\"\".concat(fileName, \"\\\" created/updated successfully!\"));\n          res.json({\n            isSuccess: true\n          });\n          _context5.next = 28;\n          break;\n        case 24:\n          _context5.prev = 24;\n          _context5.t0 = _context5[\"catch\"](2);\n          console.error(\"Error:\", _context5.t0.message);\n          res.status(501).json({\n            isSuccess: false\n          });\n        case 28:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, null, [[2, 24]]);\n  }))).apply(this, arguments);\n});\napp.get('/repositories', function (_x11, _x12) {\n  return (_ref7 = _ref7 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res) {\n    var accessToken, repositoriesResponse, repositoriesData;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          if (req.session.accessToken) {\n            _context6.next = 2;\n            break;\n          }\n          return _context6.abrupt(\"return\", res.status(401).send('Unauthorized'));\n        case 2:\n          _context6.prev = 2;\n          accessToken = req.session.accessToken; // Fetch the user's repositories from the GitHub API\n          _context6.next = 6;\n          return axios.get('https://api.github.com/user/repos', {\n            headers: {\n              Authorization: \"Bearer \".concat(accessToken)\n            }\n          });\n        case 6:\n          repositoriesResponse = _context6.sent;\n          repositoriesData = repositoriesResponse.data; // You can customize the response or render a template with the repository data\n          res.json(repositoriesData);\n          _context6.next = 15;\n          break;\n        case 11:\n          _context6.prev = 11;\n          _context6.t0 = _context6[\"catch\"](2);\n          console.error('Error fetching repositories:', _context6.t0.message);\n          res.status(500).send('Error fetching repositories');\n        case 15:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[2, 11]]);\n  }))).apply(this, arguments);\n});\napp.listen(port, function () {\n  console.log(\"Server is running on port \".concat(port));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","obj","__esModule","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","desc","set","express","require","app","config","port","process","env","PORT","axios","_require","Octokit","cors","fetch","_len","Array","_key","_ref","session","use","json","secret","resave","saveUninitialized","post","_x","_x2","_ref2","_callee","req","res","_req$body","code","language","apiKey","response","convertedCode","_callee$","_context","body","apikey","prompt","concat","max_tokens","headers","Authorization","data","choices","text","t0","console","status","_x3","_x4","_ref3","_callee2","debuggedCode","_callee2$","_context2","_x5","_x6","_ref4","_callee3","checkedCode","_callee3$","_context3","callbackUrl","authUrl","github_client_ID","redirect","_x7","_x8","_ref5","_callee4","params","_callee4$","_context4","github_client_secret","query","_x9","_x10","_ref6","_callee5","_req$body2","accessToken","brandName","fileContent","fileName","owner","repo","commitMessage","octokit","_yield$octokit$repos$","branchData","latestCommitSha","_yield$octokit$git$ge","treeData","file","_callee5$","_context5","auth","repos","getBranch","branch","commit","sha","git","getTree","tree_sha","recursive","tree","find","item","path","createOrUpdateFileContents","message","content","Buffer","from","toString","log","isSuccess","_x11","_x12","_ref7","_callee6","repositoriesResponse","repositoriesData","_callee6$","_context6","send","listen"],"sourceRoot":"C:\\Users\\91945\\Desktop\\Advance-Code-Player\\backend\\","sources":["index.js"],"sourcesContent":["const express = require(\"express\");\r\nconst app = express();\r\nrequire('dotenv').config();\r\nconst port = process.env.PORT || 3000; \r\nconst axios = require(\"axios\"); \r\nconst { Octokit } = require(\"@octokit/rest\");\r\nconst cors = require(\"cors\");\r\nconst fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));\r\nconst session = require('express-session');\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(session({\r\n  secret: 'code-convertor', // Replace with a strong, random secret\r\n  resave: false,\r\n  saveUninitialized: true,\r\n}));\r\n\r\n// Define an endpoint to generate quotes\r\napp.post('/convert', async (req, res) => {\r\n    const { code, language } = req.body;\r\n    const apiKey = process.env.apikey;\r\n  \r\n    try {\r\n      const response = await axios.post(\r\n        'https://api.openai.com/v1/engines/text-davinci-002/completions',\r\n        {\r\n          prompt: `Act as a code convertor. I will provide you the code and you have to convert it to ${language}. No need to explain the code. Just provide the converted code. Also, if there are two or three code snippet convert all the code seperately.\\n ${code}`,\r\n          max_tokens: 500, // Adjust as needed\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${apiKey}`\r\n          },\r\n        }\r\n      );\r\n  \r\n      const convertedCode = response.data.choices[0].text;\r\n      res.json({ convertedCode });\r\n    } catch (error) {\r\n      console.error('Error converting code:', error);\r\n      res.status(500).json({ error: 'An error occurred while converting code.' });\r\n    }\r\n  });\r\n\r\napp.post('/debug', async (req, res) => {\r\n    const { code } = req.body;\r\n    const apiKey = process.env.apikey;\r\n  \r\n    try {\r\n      const response = await axios.post(\r\n        'https://api.openai.com/v1/engines/text-davinci-002/completions',\r\n        {\r\n          prompt: `Act as a code debugger. I will provide you the code snippet and you have to debug it. You have to provide me the response in output section and also explain the code.\\n ${code}`,\r\n          max_tokens: 500, // Adjust as needed\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${apiKey}`\r\n          },\r\n        }\r\n      );\r\n  \r\n      const debuggedCode = response.data.choices[0].text;\r\n      res.json({ debuggedCode });\r\n    } catch (error) {\r\n      console.error('Error converting code:', error);\r\n      res.status(500).json({ error: 'An error occurred while converting code.' });\r\n    }\r\n  })\r\n\r\napp.post('/quality', async (req, res) => {\r\n    const { code } = req.body;\r\n    const apiKey = process.env.apikey;\r\n  \r\n    try {\r\n      const response = await axios.post(\r\n        'https://api.openai.com/v1/engines/text-davinci-002/completions',\r\n        {\r\n          prompt: `Act as a code quality checker. I will provide you the code snippet and you have to check quality of the code. You have to provide me your suggestions to improve the code. And also tell me what is need to be fix to make the code looks better and understandable to everyone.\\n ${code}`,\r\n          max_tokens: 1000, // Adjust as needed\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${apiKey}`\r\n          },\r\n        }\r\n      );\r\n  \r\n      const checkedCode = response.data.choices[0].text;\r\n      res.json({ checkedCode });\r\n    } catch (error) {\r\n      console.error('Error converting code:', error);\r\n      res.status(500).json({ error: 'An error occurred while converting code.' });\r\n    }\r\n  })\r\n\r\nconst callbackUrl = 'https://advance-code-player.vercel.app/home.html';\r\n\r\napp.get('/auth/github', (req, res) => {\r\n    const authUrl = `https://github.com/login/oauth/authorize?client_id=${process.env.github_client_ID}&redirect_uri=${callbackUrl}`;\r\n    res.redirect(authUrl);\r\n});\r\n\r\n\r\n// GitHub callback handler\r\napp.get('/auth/github/callback', async (req, res) => {\r\n    // const code = req.query.code;\r\n    // const error = req.query.error; // Check for the 'error' query parameter\r\n\r\n    // if (error) {\r\n    //     // User denied access, handle the error as needed\r\n    //     return res.status(403).send('Access denied by the user.');\r\n    // }\r\n    // // Exchange the code for an access token\r\n    // try {\r\n    //     const tokenResponse = await axios.post('https://github.com/login/oauth/access_token', {\r\n    //         client_id: process.env.github_client_ID,\r\n    //         client_secret: process.env.github_client_secret,\r\n    //         code: code\r\n    //     }, {\r\n    //         headers: {\r\n    //             Accept: 'application/json'\r\n    //         }\r\n    //     });\r\n\r\n    //     const accessToken = tokenResponse.data.access_token;\r\n    //     console.log(accessToken);\r\n\r\n    //     // Use the access token to fetch the user's GitHub profile\r\n    //     const userResponse = await axios.get('https://api.github.com/user', {\r\n    //         headers: {\r\n    //             Authorization: `Bearer ${accessToken}`\r\n    //         }\r\n    //     });\r\n\r\n    //     const userProfile = userResponse.data;\r\n\r\n    //     // You can now use the user profile data as needed\r\n    //     console.log(userProfile);\r\n    //     req.session.accessToken = accessToken;\r\n    //     // Redirect the user to the desired page after successful authentication\r\n    //     res.redirect('http://localhost:3000/repositories');\r\n    //     // res.json({\"token\":accessToken, \"msg\":\"User logged in successfully.\"});\r\n    // } catch (error) {\r\n    //     console.error(error);\r\n    //     res.status(500).send('Error occurred during authentication.');\r\n    // }\r\n    const params = \"?client_id=\" + process.env.github_client_ID + \"&client_secret=\" + process.env.github_client_secret + \"&code=\" + req.query.code + \"&scope=repo\";\r\n    await fetch(\"https://github.com/login/oauth/access_token\" + params, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Accept\": \"application/json\"\r\n        }\r\n    }).then((res) => res.json()).then((data) => {\r\n        res.json(data)\r\n    })\r\n});\r\n\r\n\r\n// Define an endpoint to push code to GitHub\r\n// app.post('/push-to-repo', async (req, res) => {\r\n//   try {\r\n//     // Extract data from the request body\r\n//     const { accessToken, repoName, fileName, commitMessage, code } = req.body;\r\n\r\n//     // Define the GitHub API endpoint for creating a new file\r\n//     const apiUrl = `https://api.github.com/repos/${repoName}/contents/${fileName}`;\r\n\r\n//     // Construct the request payload\r\n//     const requestData = {\r\n//       message: commitMessage,\r\n//       content: Buffer.from(code).toString('base64'), // Convert code to base64\r\n//     };\r\n\r\n//     // Set the authorization header with the GitHub access token\r\n//     const headers = {\r\n//       Authorization: `Bearer ${accessToken}`,\r\n//     };\r\n\r\n//     // Make a PUT request to create or update the file in the repository\r\n//     const response = await axios.put(apiUrl, requestData, { headers });\r\n\r\n//     if (response.status === 201) {\r\n//       res.status(201).json({ message: 'File created successfully!' });\r\n//     } else {\r\n//       res.status(response.status).json({ message: 'Failed to create file.' });\r\n//     }\r\n//   } catch (error) {\r\n//     console.error('Error pushing code to repository:', error.message);\r\n//     res.status(500).json({ message: 'Internal server error.' });\r\n//   }\r\n// });\r\n\r\n\r\napp.post('/push-to-repo', async(req,res)=>{\r\n  const { accessToken, brandName, fileContent, fileName, owner, repo, commitMessage } = req.body;\r\n  const octokit = new Octokit({\r\n      auth: accessToken,\r\n  });\r\n\r\n  try {\r\n      // Get the current commit SHA for the default branch\r\n      const { data: branchData } = await octokit.repos.getBranch({\r\n          owner,\r\n          repo,\r\n          branch: brandName, // Replace with your default branch name\r\n      });\r\n\r\n      // Get the latest commit on the branch\r\n      const latestCommitSha = branchData.commit.sha;\r\n\r\n      // Get the current tree of the latest commit\r\n      const { data: treeData } = await octokit.git.getTree({\r\n          owner,\r\n          repo,\r\n          tree_sha: latestCommitSha,\r\n          recursive: true,\r\n      });\r\n\r\n      // Find the file if it already exists in the tree\r\n      const file = treeData.tree.find((item) => item.path === fileName);\r\n\r\n      if (file) {\r\n          // If the file exists, update it\r\n          await octokit.repos.createOrUpdateFileContents({\r\n              owner,\r\n              repo,\r\n              path: fileName,\r\n              message: `${commitMessage}`,\r\n              content: Buffer.from(fileContent).toString(\"base64\"),\r\n              sha: file.sha,\r\n              branch: brandName, // Replace with your default branch name\r\n          });\r\n      } else {\r\n          // If the file doesn't exist, create it\r\n          await octokit.repos.createOrUpdateFileContents({\r\n              owner,\r\n              repo,\r\n              path: fileName,\r\n              message: `${commitMessage}`,\r\n              content: Buffer.from(fileContent).toString(\"base64\"),\r\n              branch: brandName, // Replace with your default branch name\r\n          });\r\n      }\r\n\r\n      console.log(`File \"${fileName}\" created/updated successfully!`);\r\n      res.json({ isSuccess: true })\r\n  } catch (error) {\r\n      console.error(\"Error:\", error.message);\r\n      res.status(501).json({ isSuccess: false })\r\n  }\r\n})\r\n\r\n\r\napp.get('/repositories', async (req, res) => {\r\n  // Check if the user is authenticated (you can use session or token validation here)\r\n  // console.log(req.session)\r\n  if (!req.session.accessToken) {\r\n    return res.status(401).send('Unauthorized');\r\n  }\r\n\r\n  try {\r\n    const accessToken = req.session.accessToken;\r\n\r\n    // Fetch the user's repositories from the GitHub API\r\n    const repositoriesResponse = await axios.get(\r\n      'https://api.github.com/user/repos',\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      }\r\n    );\r\n\r\n    const repositoriesData = repositoriesResponse.data;\r\n\r\n    // You can customize the response or render a template with the repository data\r\n    res.json(repositoriesData);\r\n  } catch (error) {\r\n    console.error('Error fetching repositories:', error.message);\r\n    res.status(500).send('Error fetching repositories');\r\n  }\r\n});\r\n\r\n\r\n\r\napp.listen(port, () => {\r\n    console.log(`Server is running on port ${port}`);\r\n});\r\n"],"mappings":"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"}},"mtime":1694665175984}}